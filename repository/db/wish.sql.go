// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: wish.sql

package db

import (
	"context"
)

const findWishById = `-- name: FindWishById :one
select id, pray_category_id, wish_name, description, is_date_designation, is_manual_input, view_order, is_deleted, created_by, created_at, updated_by, updated_at
from m_wishes mu 
where id = $1
`

func (q *Queries) FindWishById(ctx context.Context, id int64) (MWish, error) {
	row := q.db.QueryRow(ctx, findWishById, id)
	var i MWish
	err := row.Scan(
		&i.ID,
		&i.PrayCategoryID,
		&i.WishName,
		&i.Description,
		&i.IsDateDesignation,
		&i.IsManualInput,
		&i.ViewOrder,
		&i.IsDeleted,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.UpdatedBy,
		&i.UpdatedAt,
	)
	return i, err
}

const getWishAll = `-- name: GetWishAll :many
select id, pray_category_id, wish_name, description, is_date_designation, is_manual_input, view_order, is_deleted, created_by, created_at, updated_by, updated_at
from m_wishes mu
`

func (q *Queries) GetWishAll(ctx context.Context) ([]MWish, error) {
	rows, err := q.db.Query(ctx, getWishAll)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []MWish
	for rows.Next() {
		var i MWish
		if err := rows.Scan(
			&i.ID,
			&i.PrayCategoryID,
			&i.WishName,
			&i.Description,
			&i.IsDateDesignation,
			&i.IsManualInput,
			&i.ViewOrder,
			&i.IsDeleted,
			&i.CreatedBy,
			&i.CreatedAt,
			&i.UpdatedBy,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
